import unittest
from dead_end_filling import DeadEndFilling


labyrintti = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '.', '#', '#', '.', '#', '.', '.', '#', '#', '.', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
        ['#', '.', '#', '.', '#', '#', '#', '#', '.', '#', '.', '.', '#', '#', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '.', '#', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '.', '#', '.', '.', '#', '#', '#', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '.', '.', '.', '#'],
        ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '.', '.', '.', '#']
        ]

ratkaisu = [
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '#', '#', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '.', '#', '.', '.', '.', '.', '#', '#'],
    ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '#'],
    ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '.', '.', '#'],
    ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '#', '#', '.', '#'],
    ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '#', '#', '.', '#'],
    ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '.', '.', '.', '#'],
    ['#', '.', '#', '.', '#', '.', '#', '#', '.', '#', '#', '.', '.', '.', '#']
    ]

class TestDeadEndFilling(unittest.TestCase):
    def setUp(self):
        self.labyrintti = DeadEndFilling(labyrintti)

    def test_loytaa_sisaanpaasyn(self):
        aloituskorkeus, aloitusleveys = self.labyrintti.aloituskohta()

        self.assertEqual(aloituskorkeus, 0)
        self.assertEqual(aloitusleveys, 12)

    # def test_tunnistaa_umpikujan(self):
    #     """ei toimi vielä, en tiedä miksi"""
    #     umpikuja = self.labyrintti.onko_umpikuja(1, 1)

    #     self.assertEqual(umpikuja, True)

    def test_ratkaise(self):
        ratkaistu = self.labyrintti.ratkaise()

        self.assertEqual(ratkaistu, ratkaisu)